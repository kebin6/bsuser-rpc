// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kebin6/bsuser-rpc/ent/bsuser"
)

// BsuserCreate is the builder for creating a Bsuser entity.
type BsuserCreate struct {
	config
	mutation *BsuserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BsuserCreate) SetCreatedAt(t time.Time) *BsuserCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableCreatedAt(t *time.Time) *BsuserCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BsuserCreate) SetUpdatedAt(t time.Time) *BsuserCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableUpdatedAt(t *time.Time) *BsuserCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BsuserCreate) SetStatus(u uint8) *BsuserCreate {
	bc.mutation.SetStatus(u)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableStatus(u *uint8) *BsuserCreate {
	if u != nil {
		bc.SetStatus(*u)
	}
	return bc
}

// SetName sets the "name" field.
func (bc *BsuserCreate) SetName(s string) *BsuserCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableName(s *string) *BsuserCreate {
	if s != nil {
		bc.SetName(*s)
	}
	return bc
}

// SetMobile sets the "mobile" field.
func (bc *BsuserCreate) SetMobile(s string) *BsuserCreate {
	bc.mutation.SetMobile(s)
	return bc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableMobile(s *string) *BsuserCreate {
	if s != nil {
		bc.SetMobile(*s)
	}
	return bc
}

// SetPwd sets the "pwd" field.
func (bc *BsuserCreate) SetPwd(s string) *BsuserCreate {
	bc.mutation.SetPwd(s)
	return bc
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (bc *BsuserCreate) SetNillablePwd(s *string) *BsuserCreate {
	if s != nil {
		bc.SetPwd(*s)
	}
	return bc
}

// SetTotalAmount sets the "total_amount" field.
func (bc *BsuserCreate) SetTotalAmount(f float64) *BsuserCreate {
	bc.mutation.SetTotalAmount(f)
	return bc
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableTotalAmount(f *float64) *BsuserCreate {
	if f != nil {
		bc.SetTotalAmount(*f)
	}
	return bc
}

// SetValidAmount sets the "valid_amount" field.
func (bc *BsuserCreate) SetValidAmount(f float64) *BsuserCreate {
	bc.mutation.SetValidAmount(f)
	return bc
}

// SetNillableValidAmount sets the "valid_amount" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableValidAmount(f *float64) *BsuserCreate {
	if f != nil {
		bc.SetValidAmount(*f)
	}
	return bc
}

// SetInviteCode sets the "invite_code" field.
func (bc *BsuserCreate) SetInviteCode(s string) *BsuserCreate {
	bc.mutation.SetInviteCode(s)
	return bc
}

// SetNillableInviteCode sets the "invite_code" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableInviteCode(s *string) *BsuserCreate {
	if s != nil {
		bc.SetInviteCode(*s)
	}
	return bc
}

// SetInvitedBy sets the "invited_by" field.
func (bc *BsuserCreate) SetInvitedBy(u uint64) *BsuserCreate {
	bc.mutation.SetInvitedBy(u)
	return bc
}

// SetNillableInvitedBy sets the "invited_by" field if the given value is not nil.
func (bc *BsuserCreate) SetNillableInvitedBy(u *uint64) *BsuserCreate {
	if u != nil {
		bc.SetInvitedBy(*u)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BsuserCreate) SetID(u uint64) *BsuserCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetInviterID sets the "inviter" edge to the Bsuser entity by ID.
func (bc *BsuserCreate) SetInviterID(id uint64) *BsuserCreate {
	bc.mutation.SetInviterID(id)
	return bc
}

// SetNillableInviterID sets the "inviter" edge to the Bsuser entity by ID if the given value is not nil.
func (bc *BsuserCreate) SetNillableInviterID(id *uint64) *BsuserCreate {
	if id != nil {
		bc = bc.SetInviterID(*id)
	}
	return bc
}

// SetInviter sets the "inviter" edge to the Bsuser entity.
func (bc *BsuserCreate) SetInviter(b *Bsuser) *BsuserCreate {
	return bc.SetInviterID(b.ID)
}

// AddInviteeIDs adds the "invitee" edge to the Bsuser entity by IDs.
func (bc *BsuserCreate) AddInviteeIDs(ids ...uint64) *BsuserCreate {
	bc.mutation.AddInviteeIDs(ids...)
	return bc
}

// AddInvitee adds the "invitee" edges to the Bsuser entity.
func (bc *BsuserCreate) AddInvitee(b ...*Bsuser) *BsuserCreate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddInviteeIDs(ids...)
}

// Mutation returns the BsuserMutation object of the builder.
func (bc *BsuserCreate) Mutation() *BsuserMutation {
	return bc.mutation
}

// Save creates the Bsuser in the database.
func (bc *BsuserCreate) Save(ctx context.Context) (*Bsuser, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BsuserCreate) SaveX(ctx context.Context) *Bsuser {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BsuserCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BsuserCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BsuserCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bsuser.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bsuser.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := bsuser.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.Name(); !ok {
		v := bsuser.DefaultName
		bc.mutation.SetName(v)
	}
	if _, ok := bc.mutation.Mobile(); !ok {
		v := bsuser.DefaultMobile
		bc.mutation.SetMobile(v)
	}
	if _, ok := bc.mutation.Pwd(); !ok {
		v := bsuser.DefaultPwd
		bc.mutation.SetPwd(v)
	}
	if _, ok := bc.mutation.TotalAmount(); !ok {
		v := bsuser.DefaultTotalAmount
		bc.mutation.SetTotalAmount(v)
	}
	if _, ok := bc.mutation.ValidAmount(); !ok {
		v := bsuser.DefaultValidAmount
		bc.mutation.SetValidAmount(v)
	}
	if _, ok := bc.mutation.InviteCode(); !ok {
		v := bsuser.DefaultInviteCode
		bc.mutation.SetInviteCode(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BsuserCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bsuser.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bsuser.updated_at"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Bsuser.name"`)}
	}
	if _, ok := bc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "Bsuser.mobile"`)}
	}
	if _, ok := bc.mutation.Pwd(); !ok {
		return &ValidationError{Name: "pwd", err: errors.New(`ent: missing required field "Bsuser.pwd"`)}
	}
	if _, ok := bc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "Bsuser.total_amount"`)}
	}
	if _, ok := bc.mutation.ValidAmount(); !ok {
		return &ValidationError{Name: "valid_amount", err: errors.New(`ent: missing required field "Bsuser.valid_amount"`)}
	}
	if _, ok := bc.mutation.InviteCode(); !ok {
		return &ValidationError{Name: "invite_code", err: errors.New(`ent: missing required field "Bsuser.invite_code"`)}
	}
	return nil
}

func (bc *BsuserCreate) sqlSave(ctx context.Context) (*Bsuser, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BsuserCreate) createSpec() (*Bsuser, *sqlgraph.CreateSpec) {
	var (
		_node = &Bsuser{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bsuser.Table, sqlgraph.NewFieldSpec(bsuser.FieldID, field.TypeUint64))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bsuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bsuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bsuser.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bsuser.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Mobile(); ok {
		_spec.SetField(bsuser.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := bc.mutation.Pwd(); ok {
		_spec.SetField(bsuser.FieldPwd, field.TypeString, value)
		_node.Pwd = value
	}
	if value, ok := bc.mutation.TotalAmount(); ok {
		_spec.SetField(bsuser.FieldTotalAmount, field.TypeFloat64, value)
		_node.TotalAmount = value
	}
	if value, ok := bc.mutation.ValidAmount(); ok {
		_spec.SetField(bsuser.FieldValidAmount, field.TypeFloat64, value)
		_node.ValidAmount = value
	}
	if value, ok := bc.mutation.InviteCode(); ok {
		_spec.SetField(bsuser.FieldInviteCode, field.TypeString, value)
		_node.InviteCode = value
	}
	if nodes := bc.mutation.InviterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bsuser.InviterTable,
			Columns: []string{bsuser.InviterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bsuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvitedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.InviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bsuser.InviteeTable,
			Columns: []string{bsuser.InviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bsuser.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BsuserCreateBulk is the builder for creating many Bsuser entities in bulk.
type BsuserCreateBulk struct {
	config
	err      error
	builders []*BsuserCreate
}

// Save creates the Bsuser entities in the database.
func (bcb *BsuserCreateBulk) Save(ctx context.Context) ([]*Bsuser, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bsuser, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BsuserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BsuserCreateBulk) SaveX(ctx context.Context) []*Bsuser {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BsuserCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BsuserCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
