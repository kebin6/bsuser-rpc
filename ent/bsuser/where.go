// Code generated by ent, DO NOT EDIT.

package bsuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kebin6/bsuser-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldStatus, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldName, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldMobile, v))
}

// Pwd applies equality check predicate on the "pwd" field. It's identical to PwdEQ.
func Pwd(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldPwd, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldTotalAmount, v))
}

// ValidAmount applies equality check predicate on the "valid_amount" field. It's identical to ValidAmountEQ.
func ValidAmount(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldValidAmount, v))
}

// InviteCode applies equality check predicate on the "invite_code" field. It's identical to InviteCodeEQ.
func InviteCode(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldInviteCode, v))
}

// InvitedBy applies equality check predicate on the "invited_by" field. It's identical to InvitedByEQ.
func InvitedBy(v uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldInvitedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotNull(FieldStatus))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContainsFold(FieldName, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContainsFold(FieldMobile, v))
}

// PwdEQ applies the EQ predicate on the "pwd" field.
func PwdEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldPwd, v))
}

// PwdNEQ applies the NEQ predicate on the "pwd" field.
func PwdNEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldPwd, v))
}

// PwdIn applies the In predicate on the "pwd" field.
func PwdIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldPwd, vs...))
}

// PwdNotIn applies the NotIn predicate on the "pwd" field.
func PwdNotIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldPwd, vs...))
}

// PwdGT applies the GT predicate on the "pwd" field.
func PwdGT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldPwd, v))
}

// PwdGTE applies the GTE predicate on the "pwd" field.
func PwdGTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldPwd, v))
}

// PwdLT applies the LT predicate on the "pwd" field.
func PwdLT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldPwd, v))
}

// PwdLTE applies the LTE predicate on the "pwd" field.
func PwdLTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldPwd, v))
}

// PwdContains applies the Contains predicate on the "pwd" field.
func PwdContains(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContains(FieldPwd, v))
}

// PwdHasPrefix applies the HasPrefix predicate on the "pwd" field.
func PwdHasPrefix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasPrefix(FieldPwd, v))
}

// PwdHasSuffix applies the HasSuffix predicate on the "pwd" field.
func PwdHasSuffix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasSuffix(FieldPwd, v))
}

// PwdEqualFold applies the EqualFold predicate on the "pwd" field.
func PwdEqualFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEqualFold(FieldPwd, v))
}

// PwdContainsFold applies the ContainsFold predicate on the "pwd" field.
func PwdContainsFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContainsFold(FieldPwd, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldTotalAmount, v))
}

// ValidAmountEQ applies the EQ predicate on the "valid_amount" field.
func ValidAmountEQ(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldValidAmount, v))
}

// ValidAmountNEQ applies the NEQ predicate on the "valid_amount" field.
func ValidAmountNEQ(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldValidAmount, v))
}

// ValidAmountIn applies the In predicate on the "valid_amount" field.
func ValidAmountIn(vs ...float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldValidAmount, vs...))
}

// ValidAmountNotIn applies the NotIn predicate on the "valid_amount" field.
func ValidAmountNotIn(vs ...float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldValidAmount, vs...))
}

// ValidAmountGT applies the GT predicate on the "valid_amount" field.
func ValidAmountGT(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldValidAmount, v))
}

// ValidAmountGTE applies the GTE predicate on the "valid_amount" field.
func ValidAmountGTE(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldValidAmount, v))
}

// ValidAmountLT applies the LT predicate on the "valid_amount" field.
func ValidAmountLT(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldValidAmount, v))
}

// ValidAmountLTE applies the LTE predicate on the "valid_amount" field.
func ValidAmountLTE(v float64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldValidAmount, v))
}

// InviteCodeEQ applies the EQ predicate on the "invite_code" field.
func InviteCodeEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldInviteCode, v))
}

// InviteCodeNEQ applies the NEQ predicate on the "invite_code" field.
func InviteCodeNEQ(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldInviteCode, v))
}

// InviteCodeIn applies the In predicate on the "invite_code" field.
func InviteCodeIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldInviteCode, vs...))
}

// InviteCodeNotIn applies the NotIn predicate on the "invite_code" field.
func InviteCodeNotIn(vs ...string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldInviteCode, vs...))
}

// InviteCodeGT applies the GT predicate on the "invite_code" field.
func InviteCodeGT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGT(FieldInviteCode, v))
}

// InviteCodeGTE applies the GTE predicate on the "invite_code" field.
func InviteCodeGTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldGTE(FieldInviteCode, v))
}

// InviteCodeLT applies the LT predicate on the "invite_code" field.
func InviteCodeLT(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLT(FieldInviteCode, v))
}

// InviteCodeLTE applies the LTE predicate on the "invite_code" field.
func InviteCodeLTE(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldLTE(FieldInviteCode, v))
}

// InviteCodeContains applies the Contains predicate on the "invite_code" field.
func InviteCodeContains(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContains(FieldInviteCode, v))
}

// InviteCodeHasPrefix applies the HasPrefix predicate on the "invite_code" field.
func InviteCodeHasPrefix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasPrefix(FieldInviteCode, v))
}

// InviteCodeHasSuffix applies the HasSuffix predicate on the "invite_code" field.
func InviteCodeHasSuffix(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldHasSuffix(FieldInviteCode, v))
}

// InviteCodeEqualFold applies the EqualFold predicate on the "invite_code" field.
func InviteCodeEqualFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEqualFold(FieldInviteCode, v))
}

// InviteCodeContainsFold applies the ContainsFold predicate on the "invite_code" field.
func InviteCodeContainsFold(v string) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldContainsFold(FieldInviteCode, v))
}

// InvitedByEQ applies the EQ predicate on the "invited_by" field.
func InvitedByEQ(v uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldEQ(FieldInvitedBy, v))
}

// InvitedByNEQ applies the NEQ predicate on the "invited_by" field.
func InvitedByNEQ(v uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNEQ(FieldInvitedBy, v))
}

// InvitedByIn applies the In predicate on the "invited_by" field.
func InvitedByIn(vs ...uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIn(FieldInvitedBy, vs...))
}

// InvitedByNotIn applies the NotIn predicate on the "invited_by" field.
func InvitedByNotIn(vs ...uint64) predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotIn(FieldInvitedBy, vs...))
}

// InvitedByIsNil applies the IsNil predicate on the "invited_by" field.
func InvitedByIsNil() predicate.Bsuser {
	return predicate.Bsuser(sql.FieldIsNull(FieldInvitedBy))
}

// InvitedByNotNil applies the NotNil predicate on the "invited_by" field.
func InvitedByNotNil() predicate.Bsuser {
	return predicate.Bsuser(sql.FieldNotNull(FieldInvitedBy))
}

// HasInviter applies the HasEdge predicate on the "inviter" edge.
func HasInviter() predicate.Bsuser {
	return predicate.Bsuser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InviterTable, InviterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviterWith applies the HasEdge predicate on the "inviter" edge with a given conditions (other predicates).
func HasInviterWith(preds ...predicate.Bsuser) predicate.Bsuser {
	return predicate.Bsuser(func(s *sql.Selector) {
		step := newInviterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvitee applies the HasEdge predicate on the "invitee" edge.
func HasInvitee() predicate.Bsuser {
	return predicate.Bsuser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InviteeTable, InviteeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviteeWith applies the HasEdge predicate on the "invitee" edge with a given conditions (other predicates).
func HasInviteeWith(preds ...predicate.Bsuser) predicate.Bsuser {
	return predicate.Bsuser(func(s *sql.Selector) {
		step := newInviteeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bsuser) predicate.Bsuser {
	return predicate.Bsuser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bsuser) predicate.Bsuser {
	return predicate.Bsuser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bsuser) predicate.Bsuser {
	return predicate.Bsuser(sql.NotPredicates(p))
}
