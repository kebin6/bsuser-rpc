// Code generated by ent, DO NOT EDIT.

package bsuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bsuser type in the database.
	Label = "bsuser"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldPwd holds the string denoting the pwd field in the database.
	FieldPwd = "pwd"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldValidAmount holds the string denoting the valid_amount field in the database.
	FieldValidAmount = "valid_amount"
	// FieldInviteCode holds the string denoting the invite_code field in the database.
	FieldInviteCode = "invite_code"
	// FieldInvitedBy holds the string denoting the invited_by field in the database.
	FieldInvitedBy = "invited_by"
	// EdgeInviter holds the string denoting the inviter edge name in mutations.
	EdgeInviter = "inviter"
	// EdgeInvitee holds the string denoting the invitee edge name in mutations.
	EdgeInvitee = "invitee"
	// Table holds the table name of the bsuser in the database.
	Table = "bs_user"
	// InviterTable is the table that holds the inviter relation/edge.
	InviterTable = "bs_user"
	// InviterColumn is the table column denoting the inviter relation/edge.
	InviterColumn = "invited_by"
	// InviteeTable is the table that holds the invitee relation/edge.
	InviteeTable = "bs_user"
	// InviteeColumn is the table column denoting the invitee relation/edge.
	InviteeColumn = "invited_by"
)

// Columns holds all SQL columns for bsuser fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldName,
	FieldMobile,
	FieldPwd,
	FieldTotalAmount,
	FieldValidAmount,
	FieldInviteCode,
	FieldInvitedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultMobile holds the default value on creation for the "mobile" field.
	DefaultMobile string
	// DefaultPwd holds the default value on creation for the "pwd" field.
	DefaultPwd string
	// DefaultTotalAmount holds the default value on creation for the "total_amount" field.
	DefaultTotalAmount float64
	// DefaultValidAmount holds the default value on creation for the "valid_amount" field.
	DefaultValidAmount float64
	// DefaultInviteCode holds the default value on creation for the "invite_code" field.
	DefaultInviteCode string
)

// OrderOption defines the ordering options for the Bsuser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByPwd orders the results by the pwd field.
func ByPwd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPwd, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByValidAmount orders the results by the valid_amount field.
func ByValidAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidAmount, opts...).ToFunc()
}

// ByInviteCode orders the results by the invite_code field.
func ByInviteCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInviteCode, opts...).ToFunc()
}

// ByInvitedBy orders the results by the invited_by field.
func ByInvitedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvitedBy, opts...).ToFunc()
}

// ByInviterField orders the results by inviter field.
func ByInviterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInviterStep(), sql.OrderByField(field, opts...))
	}
}

// ByInviteeCount orders the results by invitee count.
func ByInviteeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInviteeStep(), opts...)
	}
}

// ByInvitee orders the results by invitee terms.
func ByInvitee(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInviteeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInviterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InviterTable, InviterColumn),
	)
}
func newInviteeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InviteeTable, InviteeColumn),
	)
}
