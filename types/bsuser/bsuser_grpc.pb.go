// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: bsuser.proto

package bsuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BsuserClient is the client API for Bsuser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BsuserClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// group: base
	Create(ctx context.Context, in *BsUserInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: base
	Update(ctx context.Context, in *BsUserInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: base
	GetById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BsUserInfo, error)
	// group: base
	GetByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*BsUserInfo, error)
	// group: base
	GetList(ctx context.Context, in *BsUserListReq, opts ...grpc.CallOption) (*BsUserListResp, error)
}

type bsuserClient struct {
	cc grpc.ClientConnInterface
}

func NewBsuserClient(cc grpc.ClientConnInterface) BsuserClient {
	return &bsuserClient{cc}
}

func (c *bsuserClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/bsuser.Bsuser/initDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsuserClient) Create(ctx context.Context, in *BsUserInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/bsuser.Bsuser/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsuserClient) Update(ctx context.Context, in *BsUserInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/bsuser.Bsuser/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsuserClient) GetById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BsUserInfo, error) {
	out := new(BsUserInfo)
	err := c.cc.Invoke(ctx, "/bsuser.Bsuser/getById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsuserClient) GetByMobile(ctx context.Context, in *MobileReq, opts ...grpc.CallOption) (*BsUserInfo, error) {
	out := new(BsUserInfo)
	err := c.cc.Invoke(ctx, "/bsuser.Bsuser/getByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsuserClient) GetList(ctx context.Context, in *BsUserListReq, opts ...grpc.CallOption) (*BsUserListResp, error) {
	out := new(BsUserListResp)
	err := c.cc.Invoke(ctx, "/bsuser.Bsuser/getList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BsuserServer is the server API for Bsuser service.
// All implementations must embed UnimplementedBsuserServer
// for forward compatibility
type BsuserServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// group: base
	Create(context.Context, *BsUserInfo) (*BaseIDResp, error)
	// group: base
	Update(context.Context, *BsUserInfo) (*BaseIDResp, error)
	// group: base
	GetById(context.Context, *IDReq) (*BsUserInfo, error)
	// group: base
	GetByMobile(context.Context, *MobileReq) (*BsUserInfo, error)
	// group: base
	GetList(context.Context, *BsUserListReq) (*BsUserListResp, error)
	mustEmbedUnimplementedBsuserServer()
}

// UnimplementedBsuserServer must be embedded to have forward compatible implementations.
type UnimplementedBsuserServer struct {
}

func (UnimplementedBsuserServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedBsuserServer) Create(context.Context, *BsUserInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBsuserServer) Update(context.Context, *BsUserInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBsuserServer) GetById(context.Context, *IDReq) (*BsUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedBsuserServer) GetByMobile(context.Context, *MobileReq) (*BsUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByMobile not implemented")
}
func (UnimplementedBsuserServer) GetList(context.Context, *BsUserListReq) (*BsUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedBsuserServer) mustEmbedUnimplementedBsuserServer() {}

// UnsafeBsuserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BsuserServer will
// result in compilation errors.
type UnsafeBsuserServer interface {
	mustEmbedUnimplementedBsuserServer()
}

func RegisterBsuserServer(s grpc.ServiceRegistrar, srv BsuserServer) {
	s.RegisterService(&Bsuser_ServiceDesc, srv)
}

func _Bsuser_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsuserServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bsuser.Bsuser/initDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsuserServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bsuser_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BsUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsuserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bsuser.Bsuser/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsuserServer).Create(ctx, req.(*BsUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bsuser_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BsUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsuserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bsuser.Bsuser/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsuserServer).Update(ctx, req.(*BsUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bsuser_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsuserServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bsuser.Bsuser/getById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsuserServer).GetById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bsuser_GetByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsuserServer).GetByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bsuser.Bsuser/getByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsuserServer).GetByMobile(ctx, req.(*MobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bsuser_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BsUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsuserServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bsuser.Bsuser/getList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsuserServer).GetList(ctx, req.(*BsUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bsuser_ServiceDesc is the grpc.ServiceDesc for Bsuser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bsuser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bsuser.Bsuser",
	HandlerType: (*BsuserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Bsuser_InitDatabase_Handler,
		},
		{
			MethodName: "create",
			Handler:    _Bsuser_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Bsuser_Update_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _Bsuser_GetById_Handler,
		},
		{
			MethodName: "getByMobile",
			Handler:    _Bsuser_GetByMobile_Handler,
		},
		{
			MethodName: "getList",
			Handler:    _Bsuser_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bsuser.proto",
}
